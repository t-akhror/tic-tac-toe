{"ast":null,"code":"var _jsxFileName = \"/Users/akhrortuyakov/Desktop/iTransition/task7/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\nimport PlayerNames from \"./components/PlayerNames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({\n    xScore: 0,\n    oScore: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const [playerNames, setPlayerNames] = useState({\n    x: \"X\",\n    o: \"O\"\n  });\n  const [is_name, setIs_Name] = useState(false);\n\n  const handleBoxClick = boxIdx => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"X\" : \"O\";\n      } else {\n        return value;\n      }\n    });\n    setBoard(updatedBoard); // Step 2: Check if either player has won the game\n\n    const winner = checkWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === \"O\") {\n        let {\n          oScore\n        } = scores;\n        oScore += 1;\n        setScores({ ...scores,\n          oScore\n        });\n      } else if (winner === 'X') {\n        let {\n          xScore\n        } = scores;\n        xScore += 1;\n        setScores({ ...scores,\n          xScore\n        });\n      } else {\n        setGameOver(false);\n        setBoard(Array(9).fill(null));\n      }\n    } // Step 3: Change active player\n\n\n    setXPlaying(!xPlaying);\n  };\n\n  const checkWinner = board => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i]; // Iterate through win conditions and check if either player satisfies them\n\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  };\n\n  const getPlayerNames = (xPlayer, oPlayer, is_name) => {\n    setPlayerNames({\n      x: xPlayer,\n      o: oPlayer\n    });\n    setIs_Name(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !is_name ? /*#__PURE__*/_jsxDEV(PlayerNames, {\n      getNames: getPlayerNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ScoreBoard, {\n        scores: scores,\n        xPlaying: xPlaying,\n        playerNames: playerNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        board: board,\n        onClick: gameOver ? resetBoard : handleBoxClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n        resetBoard: resetBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"s7mKH+p8R8JJripjsw91vWD/6o4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/akhrortuyakov/Desktop/iTransition/task7/src/App.js"],"names":["React","useState","useEffect","Board","ResetButton","ScoreBoard","PlayerNames","App","WIN_CONDITIONS","xPlaying","setXPlaying","board","setBoard","Array","fill","scores","setScores","xScore","oScore","gameOver","setGameOver","playerNames","setPlayerNames","x","o","is_name","setIs_Name","handleBoxClick","boxIdx","updatedBoard","map","value","idx","winner","checkWinner","i","length","y","z","resetBoard","getPlayerNames","xPlayer","oPlayer"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\n\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\nimport PlayerNames from \"./components/PlayerNames\";\n\nconst App = () => {\n\n  const WIN_CONDITIONS = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [scores, setScores] = useState({ xScore: 0, oScore: 0 })\n  const [gameOver, setGameOver] = useState(false);\n  const [playerNames, setPlayerNames]=useState({x:\"X\",o:\"O\"})\n  const [is_name, setIs_Name]=useState(false)\n\n\n\n  const handleBoxClick = (boxIdx) => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"X\" : \"O\";\n      } else {\n        return value;\n      }\n    })\n\n    setBoard(updatedBoard);\n\n    // Step 2: Check if either player has won the game\n    const winner = checkWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === \"O\") {\n        let { oScore } = scores;\n        oScore += 1;\n        setScores({ ...scores, oScore })\n      } else  if(winner==='X'){\n        let { xScore } = scores;\n        xScore += 1;\n        setScores({ ...scores, xScore })\n      }else{\n        setGameOver(false);\n    setBoard(Array(9).fill(null));\n        \n      }\n    }\n\n    // Step 3: Change active player\n    setXPlaying(!xPlaying);\n  }\n\n  const checkWinner = (board) => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  }\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  }\n\n  const getPlayerNames=(xPlayer,oPlayer,is_name)=>{\n    setPlayerNames({\n      x:xPlayer,\n      o:oPlayer\n    })\n    setIs_Name(true)\n  }\n  \n\n  return (\n    <div className=\"App\">\n      {!is_name ? (\n        <PlayerNames getNames={getPlayerNames}/>\n      ):(<>\n        <ScoreBoard scores={scores} xPlaying={xPlaying}  playerNames={playerNames}/>\n        <Board board={board} onClick={gameOver ? resetBoard : handleBoxClick} />\n        <ResetButton resetBoard={resetBoard} />\n      </>\n      )}\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}